name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # 🧪 Backend Tests
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📥 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: 🔍 Lint with flake8
      working-directory: ./backend
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🎨 Check code formatting with black
      working-directory: ./backend
      run: |
        black --check --diff .
        
    - name: 🧪 Run tests with pytest
      working-directory: ./backend
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ⚛️ Frontend Tests  
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📥 Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🔍 Lint code
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🎨 Check code formatting
      working-directory: ./frontend
      run: npm run format:check
      
    - name: 🏗️ Build project
      working-directory: ./frontend
      run: npm run build
      
    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 🐳 Docker Build Test
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: meallens-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build with docker-compose
      run: |
        docker-compose -f docker-compose.prod.yml build --no-cache

  # 🔒 Security Scans
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ✅ All Tests Passed
  all-tests-passed:
    name: ✅ All Tests Passed
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-scan]
    if: always()
    
    steps:
    - name: 🎉 All tests passed
      run: |
        echo "🎉 All tests have passed successfully!"
        echo "✅ Backend tests: ${{ needs.backend-tests.result }}"
        echo "✅ Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "✅ Docker build: ${{ needs.docker-build.result }}"
        echo "✅ Security scan: ${{ needs.security-scan.result }}"
        
    - name: ❌ Check if any tests failed
      if: |
        needs.backend-tests.result == 'failure' ||
        needs.frontend-tests.result == 'failure' ||
        needs.docker-build.result == 'failure' ||
        needs.security-scan.result == 'failure'
      run: |
        echo "❌ Some tests failed. Check the logs above."
        exit 1